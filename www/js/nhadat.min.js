'use strict';
// Declare App level module which depends on filters, and services
var App = angular.module('App', ['ngAnimate', 'ngTouch', 'ngSanitize', 'ngRoute', 'App.filters', 'App.services', 'App.directives', 'App.controllers', 'ui.bootstrap', 'google-maps', 'facebook'])
	.value('version', '© 2001-2014 nhadat.com')
	.value('Domain', 'http://nhadat.com')
	.config(['$routeProvider', '$locationProvider', '$httpProvider',
		function($routeProvider, $locationProvider, $httpProvider) {
			$routeProvider.when('/intro.html', {
				templateUrl: 'html/intro.html',
				controller: 'IntroCtrl'
			});
			$routeProvider.when('/login.html', {
				templateUrl: 'html/login.html',
				controller: 'LoginCtrl'
			});
			$routeProvider.when('/update.html', {
				templateUrl: 'html/update.html'
			});
			$routeProvider.when('/newpassword.html', {
				templateUrl: 'html/newpassword.html'
			});
			$routeProvider.when('/account.html', {
				templateUrl: 'html/account.html'
			});
			$routeProvider.when('/diadanh.html', {
				templateUrl: 'html/group.html',
				controller: 'GroupCtrl'
			});
			$routeProvider.when('/search.html', {
				templateUrl: 'html/search.html',
				controller: 'TypeaheadCtrl'
			});
			$routeProvider.when('/tag/:tagId', {
				templateUrl: 'html/tag.html',
				controller: 'TagCtrl'
			});
			$routeProvider.when('/post/:postId*', {
				templateUrl: 'html/post.html'
			});
			$routeProvider.when('/comment/:commentId*', {
				templateUrl: 'html/comment.html'
			});
			$routeProvider.when('/profile/:profileId', {
				templateUrl: 'html/profile.html'
			});
			$routeProvider.when('/map/:mapId*', {
				templateUrl: 'html/map.html'
			});
			$routeProvider.when('/contact/:contactId', {
				templateUrl: 'html/contact.html',
				controller: 'ContactCtrl'
			});
			$routeProvider.when('/sale.html', {
				templateUrl: 'html/sale.html'
			});
			$routeProvider.when('/share.html', {
				templateUrl: 'html/share.html',
				controller: 'ShareCtrl'
			});
			$routeProvider.when('/welcome.html', {
				templateUrl: 'html/welcome.html',
				controller: 'WelcomeCtrl'
			});
			$routeProvider.when('/404.html', {
				template: '<div class="flash" ng-show="flash.msg"><div class="alert alert-dismissable alert-danger"><b>Lỗi:</b>Không tìm thấy trang bạn yêu cầu</div></div>'
			});
			$routeProvider.otherwise({
				redirectTo: '/welcome.html'
			});
			$locationProvider.html5Mode(false);
			$httpProvider.defaults.headers.common = {
				"X-Requested-With": "XMLHttpRequest"
			}
		}
	])
/*.config(['FacebookProvider',
		function(FacebookProvider) {
			var myAppId = '674078509298559';
			// You can set AppId with setApp method
			// FacebookProvider.setAppId('myAppId');
			/**
			 * After setting AppId you need to initialize the module.
			 * You can pass the AppId on the init method as a shortcut too.
			 * /
			FacebookProvider.init(myAppId);
		}
	]) */
.config(['$httpProvider',
	function($httpProvider) {
		var logsOutUserOn401 = ['$location', '$q', 'Session', 'Flash',
			function($location, $q, Session, Flash) {
				var success = function(response) {
					return response;
				};
				var error = function(response) {
					if (response.status === 401) {
						Session.unset('authenticated');
						$location.path('#/login.html');
						Flash.show({
							type: "error",
							msg: response.data.flash
						});
					}
					return $q.reject(response);
				};
				return function(promise) {
					return promise.then(success, error);
				};
			}
		];
		$httpProvider.responseInterceptors.push(logsOutUserOn401);
	}
]).config(['$compileProvider',
	function($compileProvider) {
		$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|mailto|tel|sms):/);
		//$compileProvider.urlSanitizationWhitelist(/^\s*(https?|mailto|tel|sms):/);
	}
])
	.run(['$rootScope', '$location', 'Auth', 'Flash',
		function($rootScope, $location, Auth, Flash) {
			var requireAuth = ['#/diadanh.html', '#/sale.html', '#/share.html', '#/update.html', '#/account.html'];
			var requirePhone = ['#/diadanh.html', '#/sale.html'];
			$rootScope.isPath = '';
			$rootScope.$on('$routeChangeStart', function(event, next, current) {
				//$rootScope.isIntro = !Auth.isGuest();
				////if ($rootScope.isIntro) {
				//	$location.path('/intro.html');
				//}
				$rootScope.isLogin = Auth.isLoggedIn();
				$rootScope.User = Auth.user();
				$rootScope.isMenu = false;
				if (_(requireAuth).contains($location.path()) && !$rootScope.isLogin) {
					$rootScope.isPath = $location.path();
					$location.path('#/login.html');
					Flash.show({
						type: "info",
						msg: "Mục này cần phải đăng nhập để tiếp tục."
					});
				}
				if (_(requirePhone).contains($location.path()) && (!$rootScope.User.phone || !$rootScope.User.first_name)) {
					$location.path('#/update.html');
					Flash.show({
						type: "info",
						msg: "Để rao đăng bạn cần phải cập nhập tên và số điện thoại."
					});
				}
			});
		}
	]);
var services = angular.module('App.services', [])
	.factory('SearchService', ['$http', 'Domain',
		function($http, Domain) {
			var SearchService = function(search) {
				this.items = [];
				this.busy = false;
				this.page = 1;
				this.end = false;
				this.search = search || [];
				this.nextPage();
			};
			SearchService.prototype.nextPage = function() {
				if (this.end || this.busy)
					return;
				this.busy = true;
				if (!this.end) {
					$http.post(Domain + '/api/search.html', {
						'page': this.page,
						'search': this.search
					}).success(function(data) {
						if (data.length > 0) {
							for (var i = 0; i < data.length; i++) {
								this.items.push(data[i]);
							}
							this.page++;
						} else {
							this.end = true;
						}
						this.busy = false;
					}.bind(this));
				}
			};
			return SearchService;
		}
	]).factory('TagService', ['$http', 'Domain',
		function($http, Domain) {
			var TagService = function(search) {
				this.items = [];
				this.busy = false;
				this.page = 1;
				this.end = false;
				this.search = search || '';
				this.nextPage();
			};
			TagService.prototype.nextPage = function() {
				if (this.end || this.busy)
					return;
				this.busy = true;
				if (!this.end && this.search.length > 1) {
					$http.post(Domain + '/api/search/findtag.html', {
						'page': this.page,
						'keyword': this.search
					}).success(function(data) {
						if (data.length > 0) {
							for (var i = 0; i < data.length; i++) {
								this.items.push(data[i]);
							}
							this.page++;
						} else {
							this.end = true;
						}
						this.busy = false;
					}.bind(this));
				}
			};
			return TagService;
		}
	]).factory('Flash', ['$rootScope', '$timeout',
		function($rootScope, $timeout) {
			return {
				show: function(message) {
					$rootScope.flash = message;
					$timeout(function() {
						$rootScope.flash = '';
					}, 9000);
				},
				clear: function() {
					$rootScope.flash = '';
				}
			};
		}
	]).factory('Session', function() {
		return {
			get: function(key) {
				return sessionStorage.getItem(key);
			},
			set: function(key, val) {
				return sessionStorage.setItem(key, val);
			},
			unset: function(key) {
				return sessionStorage.removeItem(key);
			}
		};
	}).factory('Storage', function() {
		return {
			get: function(key) {
				return localStorage.getItem(key);
			},
			set: function(key, val) {
				return localStorage.setItem(key, val);
			},
			unset: function(key) {
				return localStorage.removeItem(key);
			}
		};
	}).factory('Auth', ['$http', '$sanitize', 'Session', 'Flash', 'Domain',
		function($http, $sanitize, Session, Flash, Domain) {
			var cacheGuest = function(ssid) {
				Session.set('guest', ssid);
			};
			var sanitizeCredentials = function(credentials) {
				return {
					user: $sanitize(credentials.user),
					password: $sanitize(credentials.password)
				};
			};
			return {
				login: function(credentials) {
					return $http.post(Domain + '/api/user/login.html', sanitizeCredentials(credentials))
						.success(function(data) {
							Session.set('user', JSON.stringify(data.user));
							Flash.show({
								type: 'success',
								msg: data.flash
							});
						}).error(function(data) {
							Flash.show({
								type: 'danger',
								msg: data.flash
							});
						});
				},
				logout: function() {
					return $http.get(Domain + '/api/user/logout.html').success(function() {
						Session.unset('user');
						Flash.show({
							type: 'success',
							msg: 'B\u1ea1n \u0111\xe3 tho\xe1t ra an to\xe0n.'
						});
					});
				},
				update: function(data) {
					Session.set('user', JSON.stringify(data));
				},
				user: function() {
					return JSON.parse(Session.get('user'));
				},
				sendmail: function(credentials) {
					return $http.post(Domain + '/api/user/sendmail.html', sanitizeCredentials(credentials))
						.success(function(data) {
							Flash.show({
								type: 'success',
								msg: data.flash
							});
						}).error(function(data) {
							Flash.show({
								type: 'danger',
								msg: data.flash
							});
						});
				},
				guest: function() {
					return $http.get(Domain + '/api/user/guest.html').success(function(data) {
						Session.set('guest', data.user);
					});
				},
				isGuest: function() {
					return Session.get('guest');
				},
				isLoggedIn: function() {
					return Session.get('user');
				}
			};
		}
	]);
angular.module('App.directives', [])
	.directive('appVersion', [
		'version',
		function(version) {
			return function(scope, elm, attrs) {
				elm.text(version);
			};
		}
	])
	.directive('scrolltop', function() {
		return {
			restrict: 'EM',
			template: '<a href="#" class="scroll-top"><i class="icon-chevron-up"></i></a>'
		};
	})
	.directive('mainnav', ['$location', '$rootScope', 'Auth',
		function($location, $rootScope, Auth) {
			return {
				restrict: 'EM',
				templateUrl: 'html/nav.html',
				controller: ['$scope', '$element', '$attrs',
					function($scope, $element, $attrs) {
						$scope.logout = function() {
							Auth.logout().success(function() {
								$scope.isLogin = false;
								$location.path('#/welcome.html');
							});
						};
						$scope.navClass = function(page) {
							var currentRoute = $location.path().substring(1) || 'search.html';
							return page === currentRoute ? 'active' : '';
						};
					}
				]
			};
		}
	])
	.directive('slider', function() {
		return {
			restrict: 'EM',
			templateUrl: 'html/slider.html'
		};
	})
	.directive('comments', function() {
		return {
			restrict: 'E',
			templateUrl: 'html/comments.html'
		};
	})
	.directive('agent', function() {
		return {
			restrict: 'EM',
			templateUrl: 'html/agent.html'
		};
	})
	.directive('notice', function() {
		return {
			restrict: 'EM',
			templateUrl: 'html/notice.html'
		};
	})
	.directive('classifieds', function() {
		return {
			restrict: 'EM',
			templateUrl: 'html/classifieds.html'
		};
	})
	.directive('follows', function() {
		return {
			restrict: 'EM',
			templateUrl: 'html/follows.html'
		};
	})
	.directive('flash', function() {
		return {
			restrict: 'EM',
			templateUrl: 'html/flash.html'
		};
	})
	.directive('mainpage', ['$rootScope',
		function($rootScope) {
			return {
				restrict: 'EM',
				template: '<div id="mainpage" ng-view ng-click="isMenu = false"></div>'
			};
		}
	])
	.directive('infiniteScroll', ['$rootScope', '$window', '$timeout',
		function($rootScope, $window, $timeout) {
			return {
				link: function(scope, elem, attrs) {
					var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
					$window = angular.element($window);
					scrollDistance = 0;
					if (attrs.infiniteScrollDistance != null) {
						scope.$watch(attrs.infiniteScrollDistance, function(value) {
							return scrollDistance = parseInt(value, 10);
						});
					}
					scrollEnabled = true;
					checkWhenEnabled = false;
					if (attrs.infiniteScrollDisabled != null) {
						scope.$watch(attrs.infiniteScrollDisabled, function(value) {
							scrollEnabled = !value;
							if (scrollEnabled && checkWhenEnabled) {
								checkWhenEnabled = false;
								return handler();
							}
						});
					}
					handler = function() {
						var elementBottom, remaining, shouldScroll, windowBottom;
						windowBottom = $window.height() + $window.scrollTop();
						elementBottom = elem.offset().top + elem.height();
						remaining = elementBottom - windowBottom;
						shouldScroll = remaining <= $window.height() * scrollDistance;
						if (shouldScroll && scrollEnabled) {
							if ($rootScope.$$phase) {
								return scope.$eval(attrs.infiniteScroll);
							} else {
								return scope.$apply(attrs.infiniteScroll);
							}
						} else if (shouldScroll) {
							return checkWhenEnabled = true;
						}
					};
					$window.on('scroll', handler);
					scope.$on('$destroy', function() {
						return $window.off('scroll', handler);
					});
					return $timeout(function() {
						if (attrs.infiniteScrollImmediateCheck) {
							if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
								return handler();
							}
						} else {
							return handler();
						}
					}, 0);
				}
			};
		}
	])
	.directive('goClick', ['$location',
		function($location) {
			return function(scope, element, attrs) {
				var path;
				attrs.$observe('goClick', function(val) {
					path = val;
				});
				element.bind('click', function() {
					scope.$apply(function() {
						$location.path(path);
					});
				});
			};
		}
	])
	.directive('remove', ['$http', 'Domain',
		function($http, Domain) {
			return function(scope, element, attrs) {
				element.bind('click', function() {
					if (confirm('B\u1ea1n ch\u1eafc ch\u1eafn mu\u1ed1n x\xf3a tin n\xe0y!!!')) {
						$http.post(Domain + '/api/message/destroy.html', {
							'id': attrs.remove
						}).success(function(data) {
							alert('\u0110\xe3 x\xf3a th\xe0nh c\xf4ng.');
						}).error(function(data, status) {
							if (status === 403) {
								alert('B\u1ea1n ph\u1ea3i \u0111\u0103ng nh\u1eadp \u0111\u1ec3 s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng n\xe0y.');
							}
							if (status === 404) {
								alert('N\u1ed9i dung kh\xf4ng t\xecm th\u1ea5y, x\xf3a tin th\u1ea5t b\u1ea1i.');
							}
						});
					}
				});
			};
		}
	])
	.directive('report', [
		'$http', 'Domain',
		function($http, Domain) {
			return function(scope, element, attrs) {
				element.bind('click', function() {
					alert('C\xe1m \u01a1n b\u1ea1n \u0111\xe3 b\xe1o tin.');
				});
			};
		}
	])
	.directive('like', [
		'$http', 'Domain',
		function($http, Domain) {
			return function(scope, element, attrs) {
				element.bind('click', function() {
					$http.post(Domain + '/api/like/create.html', {
						'like': attrs.like
					}).success(function(data) {
						return element.html('<a class="active"><i class="icon-thumbs-up"></i></a> ' + data.total);
					}).error(function(data, status) {
						if (status === 403) {
							alert('B\u1ea1n ph\u1ea3i \u0111\u0103ng nh\u1eadp \u0111\u1ec3 s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng n\xe0y.');
						}
					});
				});
			};
		}
	])
	.directive('follow', [
		'$http', 'Domain',
		function($http, Domain) {
			return function(scope, element, attrs) {
				element.bind('click', function() {
					$http.post(Domain + '/api/follow/create.html', {
						'follow': attrs.follow
					}).success(function(data) {
						return element.html('<a class="active"><i class="icon-thumbs-up"></i></a> bạn và ' + data.total + ' người khác');
					}).error(function(data, status) {
						if (status === 403) {
							alert('B\u1ea1n ph\u1ea3i \u0111\u0103ng nh\u1eadp \u0111\u1ec3 s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng n\xe0y.');
						}
					});
				});
			};
		}
	])
	.directive('autoGrow', function() {
		return function(scope, element, attr) {
			var minHeight = element[0].offsetHeight,
				paddingLeft = element.css('paddingLeft'),
				paddingRight = element.css('paddingRight');
			var $shadow = angular.element('<div></div>').css({
				position: 'absolute',
				top: -10000,
				left: -10000,
				width: element[0].offsetWidth - parseInt(paddingLeft || 0) - parseInt(paddingRight || 0),
				fontSize: element.css('fontSize'),
				fontFamily: element.css('fontFamily'),
				lineHeight: element.css('lineHeight'),
				resize: 'none'
			});
			angular.element(document.body).append($shadow);
			var update = function() {
				var times = function(string, number) {
					for (var i = 0, r = ''; i < number; i++) {
						r += string;
					}
					return r;
				};
				var val = element.val().replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/&/g, '&amp;').replace(/\n$/, '<br/>&nbsp;').replace(/\n/g, '<br/>').replace(/\s{2,}/g, function(space) {
					return times('&nbsp;', space.length - 1) + ' ';
				});
				$shadow.html(val);
				element.css('height', Math.max($shadow[0].offsetHeight + 10, minHeight) + 'px');
			};
			element.bind('keyup keydown keypress change', update);
			update();
		};
	})
	.directive('uploader', function() {
		return {
			restrict: 'E',
			scope: {
				action: '@'
			},
			controller: ['$scope', 'Auth', 'Session',
				function($scope, Auth, Session) {
					$scope.progress = 0;
					$scope.login = Auth.isLoggedIn();
					$scope.images = [];
					if (Session.get('files'))
						$scope.images = JSON.parse(Session.get('files'));
					$scope.remove = function(index) {
						$scope.images.splice(index, 1);
						Session.set('files', JSON.stringify($scope.images));
					};
					$scope.sendFile = function(el) {
						var $form = $(el).parents('form');
						if ($(el).val() == '')
							return false;
						$form.attr('action', $scope.action);
						$scope.$apply(function() {
							$scope.progress = 0;
						});
						$form.ajaxSubmit({
							type: 'POST',
							uploadProgress: function(event, position, total, percentComplete) {
								$scope.$apply(function() {
									$scope.progress = percentComplete;
								});
							},
							error: function(event, statusText, data, form) {
								$form.removeAttr('action');
							},
							success: function(data, statusText, xhr, form) {
								var ar = $(el).val().split('\\'),
									filename = ar[ar.length - 1];
								$form.removeAttr('action');
								$scope.$apply(function() {
									if (data.images.length > 0) {
										for (var i = 0; i < data.images.length; i++) {
											$scope.images.push(data.images[i]);
										}
									}
									Session.set('files', JSON.stringify($scope.images));
								});
							}
						});
					};
				}
			],
			link: function(scope, elem, attrs, ctrl) {
				elem.find('.upload').click(function() {
					elem.find('input[type="file"]').click();
				});
			},
			replace: false,
			templateUrl: 'html/uploader.html'
		};
	})
	.directive('debug', function() {
		// HTML <debug val="user"></debug>
		return {
			restrict: 'E',
			scope: {
				expression: '=val'
			},
			template: '<pre>{{debug(expression)}}</pre>',
			link: function(scope) {
				scope.debug = function(exp) {
					return angular.toJson(exp, true);
				};
			}
		};
	})
	.directive('imgMap', function() {
		// HTML <img-map markers="center"></img-map>
		return {
			restrict: 'E',
			scope: {
				markers: '='
			},
			link: function(scope, element, attrs, contoller) {
				function updateMaps(scope, element) {
					if (typeof scope.markers.latitude != "undefined") $(element).html('<img class="img-responsive" src="//maps.googleapis.com/maps/api/staticmap?center=' + scope.markers.latitude + ',' + scope.markers.longitude + '&markers=' + scope.markers.latitude + ',' + scope.markers.longitude + '&zoom=15&size=640x160&sensor=false" alt="" />');
				}
				scope.$watch('markers', function() {
					updateMaps(scope, element);
				});
			}
		};
	})
	.directive('carousel', [

		function() {
			return {
				restrict: 'EA',
				transclude: true,
				replace: true,
				require: 'carousel',
				templateUrl: 'html/carousel.html',
				scope: {
					slides: '=',
					rent: '=',
					price: '='
				},
				controller: ['$scope',
					function($scope) {
						$scope.direction = 'left';
						$scope.currentIndex = 0;
						$scope.setSlide = function(index) {
							$scope.currentIndex = index;
						};
						$scope.isSlide = function(index) {
							return $scope.currentIndex === index;
						};
						$scope.prev = function() {
							$scope.direction = 'left';
							$scope.currentIndex = ($scope.currentIndex < $scope.slides.length - 1) ? ++$scope.currentIndex : 0;
						};
						$scope.next = function() {
							$scope.direction = 'right';
							$scope.currentIndex = ($scope.currentIndex > 0) ? --$scope.currentIndex : $scope.slides.length - 1;
						};
					}
				]
			};
		}
	])
	.directive('dropdownToggle', ['$document', '$location',
		function($document, $location) {
			var openElement = null,
				closeMenu = angular.noop;
			return {
				restrict: 'CA',
				link: function(scope, element, attrs) {
					scope.$watch('$location.path', function() {
						closeMenu();
					});
					element.parent().bind('click', function() {
						closeMenu();
					});
					element.bind('click', function(event) {
						var elementWasOpen = element === openElement;
						event.preventDefault();
						event.stopPropagation();
						if ( !! openElement) {
							closeMenu();
						}
						if (!elementWasOpen && !element.hasClass('disabled') && !element.prop('disabled')) {
							element.parent().addClass('open');
							openElement = element;
							closeMenu = function(event) {
								if (event) {
									event.preventDefault();
									event.stopPropagation();
								}
								$document.unbind('click', closeMenu);
								element.parent().removeClass('open');
								closeMenu = angular.noop;
								openElement = null;
							};
							$document.bind('click', closeMenu);
						}
					});
				}
			};
		}
	]);
angular.module('App.filters', [])
	.filter('unsafe', ['$sce',
		function($sce) {
			return function(val) {
				return $sce.trustAsHtml(val);
			};
		}
	]).filter('fixbr', function() {
		return function(argument) {
			if (argument) return argument.replace(/&lt;br(.*?)\/&gt;/g, '<br />');
		}
	}).filter('bbcode', function() {
		return function(input) {
			var bbcode_in = [
				/\[b\](.*?)\[\/b\]/gi,
				/\[i\](.*?)\[\/i\]/gi,
				/\[u\](.*?)\[\/u\]/gi
			];
			var bbcode_out = [
				'<strong>$1</strong>',
				'<em>$1</em>',
				'<span style="text-decoration: underline;">$1</span>'
			];
			for (var i = 0; i < bbcode_in.length; i++) {
				input = input.replace(bbcode_in[i], bbcode_out[i]);
			}
			return input;
		};
	}).filter('vndong', function() {
		return function(input) {
			var s = parseInt(input);
			if (s) {
				var s = parseInt(input);
				var lv = new Array(' \u0111\u1ed3ng', ' ngh\xecn \u0111\u1ed3ng', ' tri\u1ec7u \u0111\u1ed3ng', ' t\u1ef7 \u0111\u1ed3ng', ' ngh\xecn t\u1ef7 \u0111\u1ed3ng');
				for (var i = 0; s >= 1000; i++)
					s /= 1000;
				if (i >= lv.length) {
					return 'S\u1ed1 ti\u1ec1n qu\xe1 l\u1edbn';
				}
				if (s) {
					s = Math.round(s * 100) / 100;
					return '~ ' + s.toString().replace('.', ',') + lv[i];
				}
				return input;
			} else
				return 'S\u1ed1 ti\u1ec1n kh\xf4ng h\u1ee3p l\u1ec7';
		};
	}).filter('pricify', function() {
		return function(input) {
			var x = parseInt(input);
			if (x < 1000) {
				return x.toString();
			} else if (x < 100000) {
				x = Math.round(x * 1000) / 1000;
				return x.toString() + '.000';
			} else if (x < 1000000) {
				x = Math.round(x / 1000000 * 100) / 100;
				return x.toString() + '<small>TR</small>';
			} else if (x < 1000000000) {
				x = Math.round(x / 1000000 * 100) / 100;
				return x.toString() + '<small>TR</small>';
			} else {
				x = Math.round(x / 1000000000 * 100) / 100;
				return x.toString() + '<small>T\u1ef6</small>';
			};
		};
	}).filter('rentify', function() {
		return function(input) {
			var x = parseInt(input);
			if (x < 1000) {
				return x.toString();
			} else if (x < 100000) {
				x = Math.round(x * 1000) / 1000;
				return x.toString() + '.000/th';
			} else if (x < 1000000) {
				x = Math.round(x / 1000000 * 100) / 100;
				return x.toString() + '<small>TR</small>/th';
			} else if (x < 1000000000) {
				x = Math.round(x / 1000000 * 100) / 100;
				return x.toString() + '<small>TR</small>/th';
			} else {
				x = Math.round(x / 1000000000 * 100) / 100;
				return x.toString() + '<small>T\u1ef6</small>/th';
			};
		};
	}).filter('characters', function() {
		return function(input, chars, breakOnWord) {
			if (isNaN(chars))
				return input;
			if (chars <= 0)
				return '';
			if (input && input.length >= chars) {
				input = input.substring(0, chars);
				if (!breakOnWord) {
					var lastspace = input.lastIndexOf(' ');
					if (lastspace !== -1) {
						input = input.substr(0, lastspace);
					}
				} else {
					while (input.charAt(input.length - 1) == ' ') {
						input = input.substr(0, input.length - 1);
					}
				}
				return input + '...';
			}
			return input;
		};
	}).filter('words', function() {
		return function(input, words) {
			if (isNaN(words))
				return input;
			if (words <= 0)
				return '';
			if (input) {
				var inputWords = input.split(/\s+/);
				if (inputWords.length > words) {
					input = inputWords.slice(0, words).join(' ') + '...';
				}
			}
			return input;
		};
	}).filter('tel', function() {
		return function(tel) {
			if (!tel) {
				return '';
			}
			var value = tel.toString().trim().replace(/[^\d]/g, '');
			if (value.match(/[^0-9]/)) {
				return tel;
			}
			var provider, prefix, number;
			switch (value.length) {
				case 10:
					provider = "";
					prefix = value.slice(0, 3);
					number = value.slice(3);
					break;
				case 11:
					if (value.slice(0, 2) == '84') {
						provider = "+84";
						prefix = value.slice(0, 5).slice(2);
						number = value.slice(5);
					} else {
						provider = "";
						prefix = value.slice(0, 4);
						number = value.slice(4);
					}
					break;
				case 12:
					provider = "+" + value.slice(0, 2);
					prefix = value.slice(0, 5).slice(2);
					number = value.slice(5);
					break;
				default:
					return tel;
			}
			number = number.slice(0, 3) + '-' + number.slice(3);
			return (provider + " (" + prefix + ") " + number).trim();
		};
	});
angular.module('App.controllers', [])
	.controller('IntroCtrl', [
		'$scope', '$http', '$location', '$timeout', 'Auth',
		function($scope, $http, $location, $timeout, Auth) {
			$scope.intro = [
				'intro/0.jpg',
				'intro/1.jpg',
				'intro/2.jpg'
			];
			$scope.start = function() {
				Auth.guest();
				$timeout(function() {
					$location.path('#/welcome.html');
				}, 1000);
			};
		}
	])
	.controller('ShareCtrl', [
		'$scope', '$http', '$timeout', '$location', '$rootScope', 'Session', 'Flash', 'Domain',
		function($scope, $http, $timeout, $location, $rootScope, Session, Flash, Domain) {
			$scope.steps = [
				'one',
				'two'
			];
			$scope.step = 0;
			$scope.form = {};
			$scope.results = [];
			$scope.tags = [];
			$scope.login = $rootScope.isLogin;
			$scope.isFirstStep = function() {
				return $scope.step === 0;
			};
			$scope.isLastStep = function() {
				return $scope.step === $scope.steps.length - 1;
			};
			$scope.CurrentStep = function() {
				return $scope.steps[$scope.step];
			};
			$scope.Label = function() {
				return $scope.isLastStep() ? '\u0110\u0103ng' : 'Ti\u1ebfp theo';
			};
			$scope.Previous = function() {
				$scope.step -= $scope.isFirstStep() ? 0 : 1;
			};
			$scope.Next = function() {
				if ($scope.isLastStep()) {
					$scope.submit();
				} else {
					$scope.step += 1;
					if ($scope.step == 1) {
						$scope.Tags();
					}
				}
			};
			$scope.submit = function() {
				if (typeof $scope.form.message != "undefined") {
					if ($rootScope.isLogin) {
						$scope.form.images = JSON.parse(Session.get('files'));
						return $http.post(Domain + '/api/message/create.html', $scope.form).success(function(data) {
							Flash.show({
								type: 'success',
								msg: 'Đăng tin thành công.'
							});
							$timeout(function() {
								$location.path('#/comment/' + data.message.id + '.html');
							}, 500);
							Session.unset('files');
						}).error(function(data) {
							Flash.show({
								type: 'danger',
								msg: data.flash
							});
						});
					} else {
						alert('Bạn chưa đăng nhập, vui lòng đăng nhập.');
					}
				} else {
					$scope.step = 0;
					Flash.show({
						type: 'danger',
						msg: 'Bạn vui lòng nhập nội dung để chia sẻ.'
					});
				}
			};
			$scope.Tags = function() {
				var k = $scope.form.message;
				if (k.length > 3)
					return $http.post(Domain + '/api/message/tags.html', {
						'content': k
					}).success(function(data) {
						$scope.tags = data.tags;
					});
			};
			$scope.toggle = function toggle(k) {
				var idx = $scope.form.tag.indexOf(k);
				if (idx > -1) {
					$scope.form.tag.splice(idx, 1);
				} else {
					$scope.form.tag.push(k);
				}
			};
		}
	])
	.controller('SaleCtrl', [
		'$scope', '$timeout', '$log', '$http', '$location', '$rootScope', 'Flash', 'Session', 'Domain',
		function($scope, $timeout, $log, $http, $location, $rootScope, Flash, Session, Domain) {
			$scope.login = $rootScope.isLogin;
			$scope.steps = [
				'one',
				'two',
				'three',
				'four',
				'five',
				'six'
			];
			$scope.step = 0;
			$scope.busy = false;
			$scope.form = {};
			$scope.results = [];
			$scope.tags = [];
			$scope.isFirstStep = function() {
				return $scope.step === 0;
			};
			$scope.isLastStep = function() {
				return $scope.step === $scope.steps.length - 1;
			};
			$scope.CurrentStep = function() {
				return $scope.steps[$scope.step];
			};
			$scope.Label = function() {
				return $scope.isLastStep() ? 'Đăng tin' : 'Tiếp theo';
			};
			$scope.Previous = function() {
				$scope.step -= $scope.isFirstStep() ? 0 : 1;
			};
			$scope.Next = function() {
				if ($scope.isLastStep()) {
					$scope.submit();
				} else {
					$scope.step += 1;
					if ($scope.step == 1) {
						$scope.Tags();
						$scope.form.images = JSON.parse(Session.get('files'));
					}
				}
			};
			$scope.center = {
				latitude: 10.823099,
				longitude: 106.629664
			};
			$scope.zoom = 15;
			$scope.markers = [];
			$scope.markerLat = null;
			$scope.markerLng = null;
			$scope.addMarker = function() {
				$scope.markers.push({
					latitude: parseFloat($scope.markerLat),
					longitude: parseFloat($scope.markerLng)
				});
				$scope.markerLat = null;
				$scope.markerLng = null;
			};
			$scope.geolocationAvailable = navigator.geolocation ? true : false;
			$scope.checkin = function() {
				if ($scope.geolocationAvailable) {
					navigator.geolocation.getCurrentPosition(function(position) {
						$scope.center = {
							latitude: position.coords.latitude,
							longitude: position.coords.longitude
						};
						$scope.position = {
							coords: $scope.center
						};
						$scope.markers = [];
						$scope.markers.push($scope.center);
						$scope.markerLat = null;
						$scope.markerLng = null;
						$scope.$apply();
					}, function() {});
				}
			};
			$scope.gmap = function(k) {
				$scope.center = {
					latitude: k.map[0],
					longitude: k.map[1]
				};
				$scope.form.local = k.local;
				if (k.tag.length > 0) {
					for (var i = 0; i < k.tag.length; i++) {
						$scope.form.tag.push(k.tag[i]);
					}
				}
				if (k.check) {
					$scope.markers = [];
					$scope.markers.push($scope.center);
				}
			};
			$scope.Tags = function() {
				return $http.post(Domain + '/api/message/tags.html', {
					'content': $scope.form.message
				}).success(function(data) {
					$scope.tags = data.tags;
				});
			};
			$scope.toggle = function toggle(k) {
				var idx = $scope.form.tag.indexOf(k);
				if (idx > -1) {
					$scope.form.tag.splice(idx, 1);
				} else {
					$scope.form.tag.push(k);
				}
			};
			$scope.suggests = function() {
				var k = $scope.form.address;
				if (k.length > 1) {
					if (!$scope.busy) {
						$scope.busy = true;
						$http.post(Domain + '/api/address.html', {
							'address': k
						}).success(function(data) {
							$scope.results = data.results;
							$scope.busy = false;
						}).error(function() {
							$scope.busy = false;
						});
					}
				} else {
					$scope.results = [];
				};
			};
			$scope.capslock = function(s) {
				var c = 0;
				for (i = 0; i < s.length; i++) {
					if (s[i].charCodeAt(s[i]) >= 65 && s[i].charCodeAt(s[i]) <= 90) {
						c++;
					}
				}
				return ((c / s.length * 100) < 15);
			};
			$scope.submit = function() {
				if ($scope.markers.length) {
					$scope.form.map = $scope.markers[0].latitude + ', ' + $scope.markers[0].longitude;
				}
				if ((typeof $scope.form.message != "undefined") && ($scope.form.message.length >= 20)) {
					var message = $scope.form.message;
					if ($scope.capslock(message)) {
						return $http.post(Domain + '/api/message/create.html', $scope.form)
							.success(function(data) {
								Flash.show({
									type: 'success',
									msg: 'Bạn đã đăng tin thành công.'
								});
								$timeout(function() {
									$location.path('#/post/' + data.message.id + '.html');
								}, 500);
								Session.unset('files');
							}).error(function(data) {
								$scope.step = 0;
								Flash.show({
									type: 'danger',
									msg: data.flash
								});
							});
					} else {
						Flash.show({
							type: 'danger',
							msg: 'Nội dung quá nhiều ký tự viết hoa.'
						});
						$scope.step = 0;
					}
				} else {
					Flash.show({
						type: 'danger',
						msg: 'Nội dung quá ngắn, ít nhất 20 ký tự.'
					});
					$scope.step = 0;
				}
			}
		}
	]).controller('WelcomeCtrl', [
		'$scope',
		function($scope) {}
	]).controller('GroupCtrl', [
		'$scope', '$timeout', '$log', '$http', '$location', '$rootScope', 'Flash', 'Domain',
		function($scope, $timeout, $log, $http, $location, $rootScope, Flash, Domain) {
			$scope.login = $rootScope.isLogin;
			$scope.steps = [
				'one',
				'two',
				'three',
				'four',
				'five',
				'six',
				'seven'
			];
			$scope.step = 0;
			$scope.busy = false;
			$scope.form = {};
			$scope.results = [];
			$scope.tags = [];
			$scope.isFirstStep = function() {
				return $scope.step === 0;
			};
			$scope.isLastStep = function() {
				return $scope.step === $scope.steps.length - 1;
			};
			$scope.CurrentStep = function() {
				return $scope.steps[$scope.step];
			};
			$scope.Label = function() {
				return $scope.isLastStep() ? 'Tạo địa danh' : 'Ti\u1ebfp theo';
			};
			$scope.Previous = function() {
				$scope.step -= $scope.isFirstStep() ? 0 : 1;
			};
			$scope.Next = function() {
				if ($scope.isLastStep()) {
					$scope.submit();
				} else {
					if ($scope.step === 1) {
						$scope.Exist();
					}
					$scope.step += 1;
				}
			};
			$scope.center = {
				latitude: 10.823099,
				longitude: 106.629664
			};
			$scope.zoom = 15;
			$scope.markers = [];
			$scope.markerLat = null;
			$scope.markerLng = null;
			$scope.addMarker = function() {
				$scope.markers.push({
					latitude: parseFloat($scope.markerLat),
					longitude: parseFloat($scope.markerLng)
				});
				$scope.markerLat = null;
				$scope.markerLng = null;
			};
			$scope.geolocationAvailable = navigator.geolocation ? true : false;
			$scope.checkin = function() {
				if ($scope.geolocationAvailable) {
					navigator.geolocation.getCurrentPosition(function(position) {
						$scope.center = {
							latitude: position.coords.latitude,
							longitude: position.coords.longitude
						};
						$scope.position = {
							coords: $scope.center
						};
						$scope.markers = [];
						$scope.markers.push($scope.center);
						$scope.$apply();
					}, function() {});
				}
			};
			$scope.gmap = function(k) {
				$scope.center = {
					latitude: k.map[0],
					longitude: k.map[1]
				};
				$scope.form.local = k.local;
				if (k.check) {
					$scope.markers = [];
					$scope.markers.push($scope.center);
				}
			};
			$scope.Tags = function(keywords) {
				return $http.post(Domain + '/api/message/tags.html', {
					'content': keywords
				}).success(function(data) {
					$scope.tags = data.tags;
				});
			};
			$scope.Exist = function() {
				return $http.post(Domain + '/api/group/tags.html', {
					'keyword': $scope.form.name
				}).success(function(data) {
					$scope.items = data.results;
					$scope.form.subdomain = data.slug;
					$scope.Domain();
				});
			};
			$scope.Domain = function() {
				if ($scope.form.subdomain.length > 2) {
					return $http.post(Domain + '/api/group/domain.html', {
						'domain': $scope.form.subdomain
					}).success(function(data) {
						if (data.results.length === 0) {
							$scope.success = true;
						} else {
							$scope.success = false;
						}
					});
				} else {
					$scope.success = false;
				}
			};
			$scope.toggle = function toggle(k) {
				var idx = $scope.form.tag.indexOf(k);
				if (idx > -1) {
					$scope.form.tag.splice(idx, 1);
				} else {
					$scope.form.tag.push(k);
				}
			};
			$scope.suggests = function() {
				var k = $scope.form.local;
				if (k.length > 1) {
					if (!$scope.busy) {
						$scope.busy = true;
						$http.post(Domain + '/api/address.html', {
							'address': k,
							'group': true
						}).success(function(data) {
							$scope.results = data.results;
							$scope.busy = false;
						}).error(function() {
							$scope.busy = false;
						});
					}
				} else {
					$scope.results = [];
				};
			};
			$scope.submit = function() {
				if ($scope.markers.length) {
					$scope.form.map = $scope.markers[0].latitude + ', ' + $scope.markers[0].longitude;
				}
				if (typeof $scope.form.local != "undefined") {
					return $http.post(Domain + '/api/group/create.html', $scope.form).success(function(data) {
						Flash.show({
							type: 'success',
							msg: 'B\u1ea1n \u0111\xe3 t\u1ea1o \u0111\u1ecba danh th\xe0nh c\xf4ng.'
						});
						$timeout(function() {
							$location.path('#/tag/' + data.group.slug + '.html');
						}, 1000);
					}).error(function(data) {
						$scope.step = 1;
						Flash.show({
							type: 'danger',
							msg: data.flash
						});
					});
				} else {
					Flash.show({
						type: 'danger',
						msg: 'Bạn cần phải chọn phường xã, quận huyện cho địa danh.'
					});
					$scope.step = 1;
				}
			};
		}
	]).controller('TagCtrl', [
		'$scope', '$http', '$routeParams', 'TagService', 'Auth', 'Domain',
		function($scope, $http, $routeParams, TagService, Auth, Domain) {
			$scope.isRealEstate = true;
			$scope.isStatus = true;
			$scope.user = Auth.user();
			$scope.isSwitch = function(arg) {
				if (arg) {
					if (!$scope.isStatus) {
						$scope.isStatus = true;
					}
					if (!$scope.isRealEstate) {
						$scope.isRealEstate = true;
					}
				}
				return !arg;
			};
			angular.extend($scope, {
				position: {
					coords: {
						latitude: 10.823099,
						longitude: 106.629664
					}
				},
				center: {
					latitude: 0,
					longitude: 0
				},
				markers: [],
				zoom: 15,
				longitude: null,
				latitude: null
			});
			$http.post(Domain + '/api/tag.html', {
				'slug': $routeParams.tagId
			}).success(function(data) {
				$scope.item = data.data;
				$scope.results = new TagService($scope.item.slug);
				$scope.stats = data.stats;
				$scope.center = {
					latitude: parseFloat($scope.item.map[0]),
					longitude: parseFloat($scope.item.map[1])
				};
				$scope.position = {
					coords: {
						latitude: parseFloat($scope.item.map[0]),
						longitude: parseFloat($scope.item.map[1])
					}
				};
				$scope.markers.push($scope.center);
			}).error(function(data, status) {
				if (status === 404) {
					$scope.item = [];
				}
			});
		}
	]).controller('PostCtrl', [
		'$scope', '$http', '$routeParams', 'Auth', 'Domain',
		function($scope, $http, $routeParams, Auth, Domain) {
			$scope.login = Auth.isLoggedIn();
			$scope.user = Auth.user();
			$scope.center = {};

			$scope.submit = function(id) {
				if (Auth.isLoggedIn()) {
					return $http.post(Domain + '/api/comment/create.html', {
						'msg_id': id,
						'comment': $scope.form.comment
					}).success(function(data) {
						$scope.item.comments.push(data);
						$scope.form = {};
					}).error(function(data) {
						alert('B\u1ea1n ph\u1ea3i \u0111\u0103ng nh\u1eadp \u0111\u1ec3 s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng n\xe0y.');
					});
				} else {
					alert('B\u1ea1n ph\u1ea3i \u0111\u0103ng nh\u1eadp \u0111\u1ec3 s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng n\xe0y.');
				}
			};
			$http.post(Domain + '/api/message/read.html', {
				'id': $routeParams.postId
			}).success(function(data) {
				$scope.item = data;
				if ($scope.item.meta.map) {
					$scope.center = {
						latitude: parseFloat($scope.item.meta.map[0]),
						longitude: parseFloat($scope.item.meta.map[1])
					};
				};
			}).error(function(data, status) {
				if (status === 404) {
					$scope.item = [];
				}
			});
		}
	]).controller('MapCtrl', [
		'$scope', '$http', '$routeParams', 'Domain',
		function($scope, $http, $routeParams, Domain) {
			angular.extend($scope, {
				position: {
					coords: {
						latitude: 0,
						longitude: 0
					}
				},
				center: {},
				markers: [],
				zoom: 15,
				longitude: null,
				latitude: null
			});
			$http.post(Domain + '/api/message/read.html', {
				'id': $routeParams.mapId
			}).success(function(data) {
				$scope.item = data;
				if ($scope.item.meta.map) {
					$scope.latitude = parseFloat($scope.item.meta.map[0]);
					$scope.longitude = parseFloat($scope.item.meta.map[1]);
					$scope.center = {
						latitude: $scope.latitude,
						longitude: $scope.longitude
					};
					$scope.position = {
						coords: {
							latitude: $scope.latitude,
							longitude: $scope.longitude
						}
					};
					$scope.markers.push($scope.center);
				};
			}).error(function(data, status) {
				if (status === 404) {
					$scope.item = [];
				}
			});
		}
	]).controller('TypeaheadCtrl', ['$scope', '$http', '$timeout', 'TagService', 'Domain',
		function($scope, $http, $timeout, TagService, Domain) {
			$scope.results = [];
			$scope.isRealEstate = true;
			$scope.isStatus = true;
			$scope.isSwitch = function(arg) {
				if (arg) {
					if (!$scope.isStatus) {
						$scope.isStatus = true;
					}
					if (!$scope.isRealEstate) {
						$scope.isRealEstate = true;
					}
				}
				return !arg;
			};
			$scope.search = function() {
				if ($scope.keyword.length > 1) {
					$timeout(function() {
						$scope.results = new TagService($scope.keyword);
					}, 1000);
				} else {
					$scope.results = [];
				};
			};
			$scope.suggests = function(keyword) {
				return $http.post(Domain + '/search/typeahead.html', {
					'keyword': keyword
				}).then(function(response) {
					return response.data;
				});
			};
		}
	]).controller('ClassifiedCtrl', [
		'$scope', '$http', '$location', 'SearchService', 'Auth', 'Domain',
		function($scope, $http, $location, SearchService, Auth, Domain) {
			$scope.isRealEstate = true;
			$scope.isStatus = true;
			$scope.user = Auth.user();
			$scope.isSwitch = function(arg) {
				if (arg) {
					if (!$scope.isStatus) {
						$scope.isStatus = true;
					}
					if (!$scope.isRealEstate) {
						$scope.isRealEstate = true;
					}
				}
				return !arg;
			};
			$scope.results = new SearchService();
			$http.post(Domain + '/api/stats.html').success(function(data) {
				$scope.stats = data.stats;
			});
		}
	]).controller('ProfileCtrl', [
		'$scope', '$http', '$routeParams', 'SearchService', 'Auth', 'Domain',
		function($scope, $http, $routeParams, SearchService, Auth, Domain) {
			$scope.myInterval = 60000;
			$scope.isRealEstate = true;
			$scope.isStatus = true;
			$scope.form = {};
			$scope.user = Auth.user();
			$http.post(Domain + '/profile.html', {
				'username': $routeParams.profileId
			}).success(function(data) {
				$scope.user = data.user;
				$scope.slides = data.slides;
				$scope.stats = data.stats;
				$scope.results = new SearchService({
					'uid': data.user.idu
				});
			});
			$scope.isSwitch = function(arg) {
				if (arg) {
					if (!$scope.isStatus) {
						$scope.isStatus = true;
					}
					if (!$scope.isRealEstate) {
						$scope.isRealEstate = true;
					}
				}
				return !arg;
			};
		}
	]).controller('SliderCtrl', [
		'$scope', '$http', 'Domain',
		function($scope, $http, Domain) {
			$scope.slides = [];
			$http.post(Domain + '/api/slider.html').success(function(data) {
				$scope.slides = data;
			});
			$scope.direction = 'left';
			$scope.currentIndex = 0;
			$scope.setSlide = function(index) {
				$scope.currentIndex = index;
			};

			$scope.isSlide = function(index) {
				return $scope.currentIndex === index;

			};
			$scope.prev = function() {
				$scope.direction = 'left';
				$scope.currentIndex = ($scope.currentIndex < $scope.slides.length - 1) ? ++$scope.currentIndex : 0;
			};
			$scope.next = function() {
				$scope.direction = 'right';
				$scope.currentIndex = ($scope.currentIndex > 0) ? --$scope.currentIndex : $scope.slides.length - 1;
			};
		}
	]).controller('ContactCtrl', [
		'$scope', '$http', '$location', '$timeout', 'Flash', 'Domain',
		function($scope, $http, $location, $timeout, Flash, Domain) {
			$scope.lastForm = {};
			$scope.form = {};
			$scope.disabled = false;
			$scope.submit = function(form) {
				$scope.lastForm = angular.copy(form);
				$http.post(Domain + '/api/contact.html', {
					'fullname': $scope.form.fullname,
					'email': $scope.form.email,
					'select': $scope.form.select,
					'message': $scope.form.message
				}).success(function(data) {
					$scope.disabled = true;
					$timeout(function() {
						$location.path('#/welcome.html');
					}, 5000);
					Flash.show({
						type: 'success',
						msg: data.flash
					});
				}).error(function(data) {
					Flash.show({
						type: 'danger',
						msg: data.flash
					});
				});
			};
			$scope.reset = function() {
				$scope.form = angular.copy($scope.lastForm);
			};
		}
	]).controller('FollowCtrl', [
		'$scope', '$http', 'Domain',
		function($scope, $http, Domain) {
			$http.post(Domain + '/api/follows.html').success(function(data) {
				$scope.follows = data;
			});
		}
	]).controller('CommentsCtrl', ['$scope', '$http', '$routeParams', 'Auth', 'Flash', 'Domain',
		function($scope, $http, $routeParams, Auth, Flash, Domain) {
			$scope.form = {};
			$scope.login = Auth.isLoggedIn();
			$scope.user = Auth.user();
			angular.extend($scope, {
				position: {
					coords: {
						latitude: 10.823099,
						longitude: 106.629664
					}
				},
				center: {
					latitude: 0,
					longitude: 0
				},
				markers: [],
				zoom: 17,
				longitude: null,
				latitude: null
			});
			$scope.submit = function(id) {
				if (Auth.isLoggedIn()) {
					return $http.post('/api/comment/create.html', {
						'msg_id': id,
						'comment': $scope.form.comment
					}).success(function(data) {
						$scope.item.comments.push(data);
						$scope.form = {};
					}).error(function(data) {
						alert('B\u1ea1n ph\u1ea3i \u0111\u0103ng nh\u1eadp \u0111\u1ec3 s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng n\xe0y.');
					});
				} else {
					alert('B\u1ea1n ph\u1ea3i \u0111\u0103ng nh\u1eadp \u0111\u1ec3 s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng n\xe0y.');
				}
			};
			$http.post(Domain + '/api/message/read.html', {
				'id': $routeParams.commentId
			}).success(function(data) {
				$scope.item = data;
				if ($scope.item.meta.map) {
					$scope.center = {
						latitude: parseFloat($scope.item.meta.map[0]),
						longitude: parseFloat($scope.item.meta.map[1])
					};
					$scope.position = {
						coords: {
							latitude: parseFloat($scope.item.meta.map[0]),
							longitude: parseFloat($scope.item.meta.map[1])
						}
					};
					$scope.markers.push($scope.center);
				};
			}).error(function(data, status) {
				if (status === 404) {
					$scope.item = [];
				}
			});
		}
	]).controller('LoginCtrl', [
		'$scope', '$location', '$http', '$filter', '$rootScope', 'Auth', 'Flash', 'Domain',
		function($scope, $location, $http, $filter, $rootScope, Auth, Flash, Domain) {
			$scope.steps = ['one', 'two', 'three', 'four'];
			$scope.step = 0;
			$scope.credentials = {
				user: '',
				password: ''
			};
			$scope.isFirstStep = function() {
				return $scope.step === 0;
			};
			$scope.isLastStep = function() {
				return $scope.step === $scope.steps.length - 1;
			};
			$scope.CurrentStep = function() {
				return $scope.steps[$scope.step];
			};
			$scope.NextLabel = function() {
				if ($scope.isLastStep()) {
					return '\u0110\u0103ng nh\u1eadp';
				} else if ($scope.isFirstStep()) {
					return 'Ti\u1ebfp t\u1ee5c';
				} else {
					return 'X\xe1c nh\u1eadn';
				}
			};
			$scope.Previous = function() {
				$scope.step = 0;
			};
			$scope.Next = function() {
				if ($scope.isFirstStep()) {
					$scope.email_or_phone();
				} else {
					if ($scope.credentials.password.length > 3)
						$scope.login();
				}
			};
			$scope.email_or_phone = function() {
				$http.post(Domain + '/api/user/status.html', {
					'user': $scope.credentials.user
				}).success(function(data) {
					$scope.step = $scope.steps.length - 1;
					$scope.phone = (data.user == 'phone');
					$scope.email = (data.user == 'email');
				}).error(function(data, status) {
					if (status == 404) {
						if (data.user == 'phone') {
							$scope.step = 1;
						} else if (data.user == 'email') {
							$scope.step = 2;
						}
					} else {
						$scope.step = 0;
						Flash.show({
							type: 'danger',
							msg: 'Email ho\u1eb7c s\u1ed1 \u0111i\u1ec7n tho\u1ea1i kh\xf4ng h\u1ee3p l\u1ec7.'
						});
					}
				});
			};
			$scope.resetpw = function() {
				Auth.sendmail($scope.credentials).error(function() {
					$scope.step = 0;
				});
			};
			$scope.login = function() {
				Auth.login($scope.credentials).success(function(data) {
					if (data.user.otp) {
						$location.path('#/newpassword.html');
					} else if ($rootScope.isPath) {
						$location.path($rootScope.isPath);
						$rootScope.isPath = '';
					} else {
						$location.path('#/welcome.html');
					}
				}).error(function() {
					$scope.step = 0;
				});
			};

			$scope.$watch('credentials.user', function() {
				$scope.credentials.user = $filter('tel')($scope.credentials.user);
			});
		}
	])
	.controller('AccountCtrl', [
		'$scope', '$http', '$location', '$filter', 'Auth', 'Flash', 'Domain',
		function($scope, $http, $location, $filter, Auth, Flash, Domain) {
			$scope.phone = false;
			$scope.email = false;
			$scope.name = false;
			$scope.passwd = false;
			$scope.user = Auth.user();
			$scope.$watch('form.phone', function() {
				$scope.form.phone = $filter('tel')($scope.form.phone);
			});
			$scope.verify = function() {
				return $http.post(Domain + '/api/user/verify.html', $scope.form)
					.success(function(data) {
						Flash.show({
							type: 'success',
							msg: data.flash
						});
						if (data.phone) {
							$scope.phone = true;
							$scope.email = false;
						}
						if (data.email) {
							$scope.phone = false;
							$scope.email = true;
						}
					}).error(function(data) {
						Flash.show({
							type: 'danger',
							msg: data.flash
						});
					});
			};
			$scope.confirm = function() {
				return $http.post(Domain + '/api/user/confirm.html', $scope.form)
					.success(function(data) {
						Flash.show({
							type: 'success',
							msg: data.flash
						});
						Auth.update(data.user);
						$location.path('#/welcome.html');
					}).error(function(data) {
						Flash.show({
							type: 'danger',
							msg: data.flash
						});
					});
			};
			$scope.submit = function() {
				if (Auth.isLoggedIn()) {
					return $http.post(Domain + '/api/user/update.html', $scope.form)
						.success(function(data) {
							Flash.show({
								type: 'success',
								msg: data.flash
							});
							Auth.update(data.user);
							$scope.user = Auth.user();
							$scope.name = false;
						}).error(function(data) {
							Flash.show({
								type: 'danger',
								msg: data.flash
							});
							$scope.user = Auth.user();
						});
				} else {
					Flash.show({
						type: 'danger',
						msg: 'Bạn chưa đăng nhập, vui lòng đăng nhập.'
					});
				}
			};
			$scope.password = function() {
				if (Auth.isLoggedIn()) {
					if ((typeof $scope.form.password != "undefined") && ($scope.form.password.length >= 6)) {
						return $http.post(Domain + '/api/user/update.html', $scope.form).success(function(data) {
							Flash.show({
								type: 'success',
								msg: data.flash
							});
							Auth.update(data.user);
							$scope.passwd = false;
						}).error(function(data) {
							Flash.show({
								type: 'danger',
								msg: data.flash
							});
						});
					} else {
						Flash.show({
							type: 'danger',
							msg: 'Mật khẩu ít nhất 6 ký tự.'
						});
					}
				} else {
					Flash.show({
						type: 'danger',
						msg: 'Bạn chưa đăng nhập, vui lòng đăng nhập.'
					});
				}
			};
		}
	])
	.controller('NewPasswordCtrl', [
		'$scope', '$http', '$location', 'Auth', 'Flash', 'Domain',
		function($scope, $http, $location, Auth, Flash, Domain) {
			$scope.update = function() {
				if (Auth.isLoggedIn()) {
					if ((typeof $scope.form.password != "undefined") && ($scope.form.password.length >= 6)) {
						return $http.post(Domain + '/api/user/update.html', $scope.form).success(function(data) {
							Auth.update(data.user);
							$location.path('#/welcome.html');
							Flash.show({
								type: 'success',
								msg: data.flash
							});
						}).error(function(data) {
							Flash.show({
								type: 'danger',
								msg: data.flash
							});
						});
					} else {
						Flash.show({
							type: 'danger',
							msg: 'Mật khẩu ít nhất 6 ký tự.'
						});
					}
				} else {
					Flash.show({
						type: 'danger',
						msg: 'Bạn chưa đăng nhập, vui lòng đăng nhập.'
					});
				}
			};
		}
	]);
/*
	.controller('FacebookCtrl', [
		'$scope', '$timeout', 'Facebook', 'Auth',
		function($scope, $timeout, Facebook, Auth) {
			$scope.user = {};
			$scope.logged = false;
			$scope.byebye = false;
			$scope.salutation = false;
			$scope.$watch(function() {
				return Facebook.isReady();
			}, function(newVal) {
				if (newVal)
					$scope.facebookReady = true;
			});
			$scope.IntentLogin = function() {
				Facebook.getLoginStatus(function(response) {
					if (response.status == 'connected') {
						$scope.logged = true;
						$scope.me();
					} else
						$scope.login();
				});
			};
			$scope.login = function() {
				Facebook.login(function(response) {
					if (response.status == 'connected') {
						$scope.logged = true;
						$scope.me();
					}
				});
			};
			$scope.me = function() {
				Facebook.api('/me', function(response) {
					$scope.$apply(function() {
						$scope.user = response;
					});
				});
			};
			$scope.logout = function() {
				Facebook.logout(function() {
					$scope.$apply(function() {
						$scope.user = {};
						$scope.logged = false;
					});
				});
			};
			$scope.$on('Facebook:statusChange', function(ev, data) {
				console.log('Status: ', data);
				if (data.status == 'connected') {
					$scope.$apply(function() {
						$scope.salutation = true;
						$scope.byebye = false;
					});
				} else {
					$scope.$apply(function() {
						$scope.salutation = false;
						$scope.byebye = true;
						$timeout(function() {
							$scope.byebye = false;
						}, 2000);
					});
				}
			});
		}
	]).animation('.slide-animation', function() {
		return {
			addClass: function(element, className, done) {
				var scope = element.scope();
				if (className == 'ng-hide') {
					var finishPoint = element.parent().width();
					if (scope.direction !== 'right') {
						finishPoint = -finishPoint;
					}
					TweenMax.to(element, 0.5, {
						left: finishPoint,
						onComplete: done
					});
				} else {
					done();
				}
			},
			removeClass: function(element, className, done) {
				var scope = element.scope();
				if (className == 'ng-hide') {
					element.removeClass('ng-hide');
					var startPoint = element.parent().width();
					if (scope.direction === 'right') {
						startPoint = -startPoint;
					}
					TweenMax.set(element, {
						left: startPoint
					});
					TweenMax.to(element, 0.5, {
						left: 0,
						onComplete: done
					});
				} else {
					done();
				}
			}
		};
	});*/